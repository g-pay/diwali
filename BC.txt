// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

contract SimpleBank {
    uint8 private clientCount;
    mapping (address => uint) private balances;
    address public owner;

    // Log the event about a deposit being made by an address and its amount
    event LogDepositMade(address indexed accountAddress, uint amount);

    // Constructor is "payable" so it can receive the initial funding of 30,
    // required to reward the first 3 clients
    constructor()  payable {
        require(msg.value == 0 ether, "30 ether initial funding required");
        /* Set the owner to the creator of this contract */
        owner = msg.sender;
        clientCount = 0;
    }

    /// @notice Enroll a customer with the bank,
    /// giving the first 3 of them 10 ether as reward
    /// @return The balance of the user after enrolling
    function enroll() public returns (uint) {
        if (clientCount < 3) {
            clientCount++;
            balances[msg.sender] = 10 ether;
        }
        return balances[msg.sender];
    }

    /// @notice Deposit ether into bank, requires method is "payable"
    /// @return The balance of the user after the deposit is made
    function deposit() public payable returns (uint) {
        balances[msg.sender] += msg.value;
        emit LogDepositMade(msg.sender, msg.value);
        return balances[msg.sender];
    }

    /// @notice Withdraw ether from bank
    /// @return remainingBal The balance remaining for the user
    function withdraw(uint withdrawAmount) public returns (uint remainingBal) {
        // Check enough balance available, otherwise just return balance
        if (withdrawAmount <= balances[msg.sender]) {
            balances[msg.sender] -= withdrawAmount;
            payable(msg.sender).transfer(withdrawAmount);
        }
        return balances[msg.sender];
    }

    /// @notice Just reads balance of the account requesting, so "constant"
    /// @return The balance of the user
    function balance() public view returns (uint) {
        return balances[msg.sender];
    }

    /// @return The balance of the Simple Bank contract
    function depositsBalance() public view returns (uint) {
        return address(this).balance;
    }
}



how to give input:
after deploy go downside then you can see
deploy button and all buttons to give input and perform operations




output Explaination


The provided output represents an Ethereum transaction that interacts with the `SimpleBank` smart contract. Let's break down the key information in this transaction output:

- `from`: 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 - This is the Ethereum address that initiated the transaction.

- `to`: SimpleBank.deposit() 0xd9145CCE52D386f254917e481eB44e9943F39138 - This is the target function within the `SimpleBank` contract that is being called, along with the contract's address.

- `value`: 0 wei - This indicates the amount of Ether (cryptocurrency) transferred with this transaction. In this case, no Ether was sent (0 wei).

- `gas`: 29558 gas - The amount of gas allocated for the transaction. Gas is a measure of computational work required for the transaction.

- `transaction cost`: 25702 gas - The total gas cost for this transaction, including both execution cost and additional costs.

- `execution cost`: 4638 gas - The portion of the gas cost related to executing the contract's functions.

- `input`: 0xd0e...30db0 - This is the input data for the transaction, which typically includes function selectors and parameters for the function call. In this case, it's empty, indicating that the function called may not have required additional input data.

- `decoded input`: {} - There are no additional input parameters provided to the function.

- `decoded output`: {"0": "uint256: 0"} - This indicates the output of the transaction. In this case, it appears to be a response from the `deposit` function, where it returns a `uint256` value of 0.

- `logs`: This section provides information about the events emitted by the contract during the transaction. In this case, the contract emitted a "LogDepositMade" event. The event includes details about the account address (0x5B38Da6a701c568545dCfcB03FcB875f56beddC4) and the deposit amount (0).

- `status`: true - This indicates that the transaction was successfully mined and executed on the Ethereum blockchain.

- `transaction hash`: 0x52c71e6afd6234bb3e9b2b508233ba1a4226e7280db517d4f10b0f7b62b9ee1e - This is the unique identifier (hash) for the transaction.

- `block hash` and `block number`: These represent the block in which the transaction was included.

- `val`: 0 wei - This indicates the value of the transaction in wei (the smallest unit of Ether).

In summary, this transaction represents a deposit interaction with the `SimpleBank` contract, where an account (0x5B38Da6a701c568545dCfcB03FcB875f56beddC4) initiated the deposit operation with a value of 0 wei. The transaction was successfully executed and included in a block on the Ethereum blockchain. The `LogDepositMade` event was emitted by the contract, confirming the deposit action.